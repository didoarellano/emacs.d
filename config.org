#+TITLE: Dido's Emacs Configuration

* Package management

Initialize ~package.el~ and use the melpa repositories.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
               '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+END_SRC

Make sure [[https://github.com/jwiegley/use-package][use-package]] is installed.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
#+END_SRC

* Backup and temp files

Try to keep emacs from pooping all over my home directory with backups, save-files, ido, smex, etc.

Set the temp directory.

#+BEGIN_SRC emacs-lisp
  (defvar --tmp-directory (expand-file-name (concat user-emacs-directory "tmp/")))
  (setq backup-directory-alist `(("." . ,--tmp-directory)))
  (setq auto-save-file-name-transforms `((".*" ,--tmp-directory t)))
#+END_SRC

Make backup files (even with version control); Don't create lock and autosave files.

#+BEGIN_SRC emacs-lisp
  (setq vc-make-backup-files t)
  (setq create-lockfiles nil)
  (setq auto-save-default nil)
#+END_SRC

* Evil
** evil-leader

~evil-leader~ needs to load before ~evil~ itself so that it works on ~*scratch*~ and ~*Messages*~ buffers. See the [[https://github.com/cofi/evil-leader#usage][usage section on the evil-leader README]] and [[https://github.com/cofi/evil-leader/issues/10#issuecomment-19165722][@cofi's comment]].

#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :ensure t
    :init
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>"))
#+END_SRC

** evil-mode
*** Install goto-chg dependency

Install evil's ~goto-chg~ dependency from melpa "bleeding-edge" as the right version (1.6) is not in stable.

#+BEGIN_SRC emacs-lisp
  (use-package goto-chg
    :ensure t
    :pin melpa)
#+END_SRC

*** Minimize evil state noise

Removes ~evil~ state noise in the echo area and the angle brackets from state tags in the modeline, i.e "~<N>~".

#+BEGIN_SRC emacs-lisp
  (defun --minimal-evil-states()
    (setq evil-echo-state nil)
    (setq evil-normal-state-tag   "N"
          evil-insert-state-tag   "I"
          evil-visual-state-tag   "V"
          evil-motion-state-tag   "M"
          evil-emacs-state-tag    "E"
          evil-replace-state-tag  "R"
          evil-operator-state-tag "O"))
#+END_SRC

*** Key bindings
**** ~C-e~ and ~C-y~ scrolling in bigger increments

#+BEGIN_SRC emacs-lisp
  (defun --evil-scroll-line-down ()
    (interactive)
    (evil-scroll-line-down 5))

  (defun --evil-scroll-line-up ()
    (interactive)
    (evil-scroll-line-up 5))

  (defun --bind-keys-bigger-scroll-increments ()
    (define-key evil-motion-state-map (kbd "C-e") '--evil-scroll-line-down)
    (define-key evil-motion-state-map (kbd "C-y") '--evil-scroll-line-up))
#+END_SRC

**** Insert newlines above and below current line in *Normal* state

#+BEGIN_SRC emacs-lisp
  (defun --insert-newline-below ()
    (interactive)
    (save-excursion
      (end-of-line)
      (newline)))

  (defun --insert-newline-above ()
    (interactive)
    (save-excursion
      (beginning-of-line)
      (newline)))

  (defun --bind-keys-insert-newlines ()
    (define-key evil-normal-state-map (kbd "<return>") '--insert-newline-below)
    (define-key evil-normal-state-map (kbd "<S-return>") '--insert-newline-above))
#+END_SRC

**** Case twiddling

From http://lists.gnu.org/archive/html/help-gnu-emacs/2008-10/msg00677.html

#+BEGIN_SRC emacs-lisp
  (defun --toggle-letter-case ()
    "Toggle the letter case of current word or text selection. Toggles from 3
      cases: upper case, lower case, title case, in that cyclic order."
    (interactive)
    (let (pos1 pos2 (deactivate-mark nil) (case-fold-search nil))
      (if (and transient-mark-mode mark-active)
          (setq pos1 (region-beginning)
                pos2 (region-end))
        (setq pos1 (car (bounds-of-thing-at-point 'word))
              pos2 (cdr (bounds-of-thing-at-point 'word))))

      (when (not (eq last-command this-command))
        (save-excursion
          (goto-char pos1)
          (cond
           ((looking-at "[[:lower:]][[:lower:]]") (put this-command 'state "all lower"))
           ((looking-at "[[:upper:]][[:upper:]]") (put this-command 'state "all caps"))
           ((looking-at "[[:upper:]][[:lower:]]") (put this-command 'state "init caps"))
           (t (put this-command 'state "all lower")))))

      (cond
       ((string= "all lower" (get this-command 'state))
        (upcase-initials-region pos1 pos2) (put this-command 'state "init caps"))
       ((string= "init caps" (get this-command 'state))
        (upcase-region pos1 pos2) (put this-command 'state "all caps"))
       ((string= "all caps" (get this-command 'state))
        (downcase-region pos1 pos2) (put this-command 'state "all lower")))))

  (defun --bind-keys-toggle-letter-case ()
    (define-key evil-visual-state-map "~" '--toggle-letter-case))
#+END_SRC

**** Readline bindings in *Insert* state

Apart from ~C-h~, everything is default in non-Evil Emacs.

#+BEGIN_SRC emacs-lisp
  (defun --insert-state-readline-keys ()
    (define-key evil-insert-state-map (kbd "C-a") 'move-beginning-of-line) ; was evil-paste-last-insertion
    (define-key evil-insert-state-map (kbd "C-e") 'move-end-of-line) ; was evil-copy-from-below
    (define-key evil-insert-state-map (kbd "C-h") 'backward-delete-char) ; was help character
    (define-key evil-insert-state-map (kbd "C-d") 'delete-forward-char) ; was evil-shift-left-line
    (define-key evil-insert-state-map (kbd "C-k") 'kill-line) ; was evil-insert-digraph
    (define-key evil-insert-state-map (kbd "C-y") 'yank) ; was evil-copy-from-above
    )
#+END_SRC

*** Install

Finally install and configure ~evil-mode~.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (--minimal-evil-states)
    (--bind-keys-bigger-scroll-increments)
    (--bind-keys-insert-newlines)
    (--bind-keys-toggle-letter-case)
    (--insert-state-readline-keys)
    :config
    (evil-mode 1))
#+END_SRC

** evil-surround

Flip ~s~ and ~S~ in *Visual* state. They're way too ingrained in muscle memory to ever change. Relevant: [[https://github.com/timcharper/evil-surround/pull/48][evil-surround]] and [[https://github.com/tpope/vim-surround/commit/6f0984a][vim-surround]]

#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t
    :init
    (global-evil-surround-mode 1)
    (evil-define-key 'visual evil-surround-mode-map "S" 'evil-substitute)
    (evil-define-key 'visual evil-surround-mode-map "s" 'evil-surround-region))
#+END_SRC

** evil-matchit
*** Fix % not jumping to proper pair in visual state

#+BEGIN_SRC emacs-lisp
  (defun evilmi-customize-keybinding ()
    (evil-define-key 'visual evil-matchit-mode-map "%" '--evilmi-fix-jump-items-in-visual-mode))

  (defun --evilmi-fix-jump-items-in-visual-mode ()
    (interactive)
    (let ((visual-type (evil-visual-type)))
      (evil-exit-visual-state)
      (evil-set-marker ?\&)
      (evilmi-jump-items)
      (evil-visual-make-selection (evil-get-marker ?\&) (point) visual-type)))
#+END_SRC

*** Install

#+BEGIN_SRC emacs-lisp
  (use-package evil-matchit
    :ensure t
    :init (global-evil-matchit-mode 1))
#+END_SRC

** evil-numbers

#+BEGIN_SRC emacs-lisp
  (use-package evil-numbers
    :ensure t
    :init
    (define-key evil-normal-state-map (kbd "+") 'evil-numbers/inc-at-pt) ; was evil-previous-line-first-non-blank
    (define-key evil-normal-state-map (kbd "-") 'evil-numbers/dec-at-pt) ; was evil-next-line-first-non-blank
    )
#+END_SRC

** Modes and initial states

#+BEGIN_SRC emacs-lisp
  (evil-set-initial-state 'package-menu-mode 'motion)
  (evil-set-initial-state 'Custom-mode 'motion)
#+END_SRC

* Gui
** Remove all the chrome
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
  (add-to-list 'default-frame-alist '(vertical-scroll-bars . nil) t)
#+END_SRC

** Set the frame title

If buffer is visiting a file display its full path (_~/path/to/file_) , otherwise display just the buffer name (_*scratch*_).

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format
        '(" " (:eval
               (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))))
#+END_SRC

** Fonts

Set font, font size, and lineheight.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'initial-frame-alist '(font . "Source Code Pro for Powerline-10") t)
  (add-to-list 'default-frame-alist '(font . "Source Code Pro for Powerline-10") t)
  (setq-default line-spacing 0.15)
#+END_SRC
